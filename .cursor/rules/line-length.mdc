---
description: 
globs: 
alwaysApply: false
---
# 80-Character Line Limit Rule

## When to Apply
- Writing any code file
- Creating or editing documentation
- Writing commit messages
- Creating configuration files

## Required Actions

### Code Files
- **Maximum line length**: 80 characters
- **Break long lines** at logical points (operators, commas, etc.)
- **Use proper indentation** when breaking lines
- **Maintain readability** when splitting

### Documentation Files
- **Maximum line length**: 80 characters
- **Break at word boundaries** when possible
- **Use proper markdown formatting** for long content

### Configuration Files
- **Maximum line length**: 80 characters
- **Break JSON/JSONL** at logical points
- **Maintain valid syntax** when breaking

## Why This Matters
- **Better readability** on all screen sizes
- **Easier code reviews** and diffs
- **Consistent formatting** across the codebase
- **Better terminal experience** when viewing files
- **Improved accessibility** for developers with visual impairments

## Examples

### Good (JavaScript/TypeScript)
```typescript
const longVariableName = someFunction(
  parameter1,
  parameter2,
  parameter3
);

const result = await apiCall({
  method: 'POST',
  url: '/endpoint',
  data: { key: 'value' }
});
```

### Good (JSON/JSONL)
```json
{
  "method": "POST",
  "path": "/auth/signup",
  "description": "Register a new user",
  "request": {
    "body": {
      "name": "string",
      "email": "string",
      "phone": "string",
      "password": "string"
    }
  }
}
```

### Good (Markdown)
```markdown
This is a long line that should be broken at word boundaries to 
maintain readability and stay within the 80-character limit.
```

## Tools
- **Prettier**: Configure with `printWidth: 80`
- **ESLint**: Use `max-len` rule with 80 character limit
- **Editor settings**: Set ruler/guide at 80 characters
